import { FormikProps } from "formik";
import { Button } from "primereact/button";
import { Dialog } from "primereact/dialog";
import { Sidebar } from "primereact/sidebar";
import { useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import { selectItem } from "../../slices/user.slice";
import { deleteWindow } from "../../slices/window.slice";
import { actions } from "../../types";
import { getFormErrorMessage, isFormFieldInvalid } from "../../utils/validate.util";
import "./SidebarWindow.css";
const SidebarWindow = ({
	dialogVisible,
	formik,
	closeDialog,
	action,
}: {
	dialogVisible: boolean;
	setDialogVisible: (e: boolean) => void;
	formik: FormikProps<any>;
	closeDialog: VoidFunction;
	action: actions;
}) => {
	const dispatch = useAppDispatch();
	const windowState = useAppSelector((state) => state.window);
	const [isDisabled, setIsDisabled] = useState(true);
	const [visibleConfirm, setVisibleConfirm] = useState(false);
	const getNextRoleCode = (list: any[]) => {
		const maxCode = Math.max(...list.map((window) => parseInt(window.code.replace("R", ""), 10)));
		return `R${String(maxCode + 1).padStart(4, "0")}`;
	};
	const handledeleteWindow = (id: string) => {
		dispatch(deleteWindow(id));
	};
	useEffect(() => {
		if (windowState.item && action === "UPD") {
			formik.setValues(windowState.item);
		}
	}, [windowState]);
	useEffect(() => {
		if (formik.values !== windowState.item) {
			setIsDisabled(false);
		} else {
			setIsDisabled(true);
		}
	}, [formik.values, windowState.item]);
	useEffect(() => {
		if (windowState.action === "INS" && dialogVisible) {
			formik.setFieldValue("code", getNextRoleCode(windowState.list));
		}
	}, [windowState, dialogVisible]);

	return (
		<>
			<Sidebar
				visible={dialogVisible}
				onHide={() => closeDialog()}
				position="right"
				style={{ width: "881px" }}
				header={
					<>
						<div className="d-flex justify-content-between align-items-center">
							<h2
								style={{
									fontSize: "24px",
									fontWeight: "400",
								}}
							>
								{action === "INS" ? "Add window" : action === "UPD" ? "Edit window" : ""}
							</h2>
						</div>
					</>
				}
			>
				<div
					className="accordionSidebar px-3"
					style={{
						marginTop: "20px",
						marginBottom: "100px",
					}}
				>
					<div className="mb-3 d-flex flex-column" style={{ gap: "4px" }}>
						<label
							className="form-label"
							style={{
								fontSize: "16px",
								fontWeight: "600",
							}}
						>
							<span style={{ color: "#FF3C32", fontSize: "16px", fontWeight: "600" }}>*</span>
							Add window's name
						</label>
						<input
							type="text"
							placeholder={"Please input window's name"}
							maxLength={50}
							className="form-control"
							value={formik.values?.name}
							onChange={(e) => formik.setFieldValue("name", e.target.value)}
							style={{
								border: "1px solid #CCCED5",
								borderRadius: "4px",
								padding: "12px",
								height: "60px",
							}}
						/>
						{/* {formik.errors.name && <small className="p-error">{formik.errors.name as string}</small>} */}
						{isFormFieldInvalid("name", formik) && getFormErrorMessage("name", formik)}
					</div>
					<div className="mb-3 d-flex flex-column" style={{ gap: "4px" }}>
						<div className="d-flex flex-column form-label">
							<p
								style={{
									fontSize: "16px",
									fontWeight: "600",
									padding: 0,
									margin: 0,
									color: "#3E4451",
								}}
							>
								Code
							</p>
							<small
								style={{
									fontSize: "16px",
									fontWeight: "400",
									color: "#9A9EA7",
								}}
							>
								This data will be automatically generated by the system
							</small>
						</div>
						<input
							type="text"
							maxLength={50}
							className="form-control"
							value={formik.values.code}
							onChange={() => {}}
							disabled
							style={{
								border: "1px solid #CCCED5",
								borderRadius: "4px",
								padding: "12px",
								height: "60px",
								color: "#9A9EA7",
								backgroundColor: "#F0F2F4",
								cursor: "not-allowed",
							}}
						/>
					</div>
				</div>
				{action === "INS" ? (
					<div className="position-absolute bottom-0 end-0 p-3 bg-white border-top w-100">
						<div className="d-flex justify-content-end">
							<Button
								label="Cancel"
								onClick={() => closeDialog()}
								style={{
									border: "1px solid #CCCED5",
									color: "#21242B",
									backgroundColor: "white",
									borderRadius: "8px",
									marginRight: "16px",
								}}
							/>
							<button
								onClick={() => {
									dispatch(selectItem(formik.values));
									formik.handleSubmit();
								}}
								className="btn btn-outline-secondary py-2 px-4"
								style={{
									color: "#FFFFFF",
									backgroundColor: "#1160B7",
								}}
							>
								Save
							</button>
						</div>
					</div>
				) : action === "UPD" ? (
					<div className="position-absolute bottom-0 end-0 p-3 bg-white border-top w-100">
						<div className="d-flex justify-content-end gap-2">
							<button
								onClick={() => {
									closeDialog();
									setVisibleConfirm(true);
								}}
								className="btn btn-outline-danger"
							>
								Delete
							</button>
							<button
								onClick={() => {
									dispatch(selectItem(formik.values));
									formik.handleSubmit();
								}}
								className="btn btn-outline-secondary py-2 px-4"
								style={{
									color: isDisabled ? "#9A9EA7" : "#FFFFFF",
									backgroundColor: isDisabled ? "#F0F2F4" : "#1160B7",
								}}
								disabled={isDisabled}
							>
								Save
							</button>
						</div>
					</div>
				) : (
					<></>
				)}
			</Sidebar>
			<Dialog
				header={<div style={{ padding: "10px 0" }}>Delete this information?</div>}
				visible={visibleConfirm}
				style={{ width: "664px" }}
				onHide={() => {
					if (!visibleConfirm) return;
					setVisibleConfirm(false);
				}}
				footer={
					<div
						className="d-flex align-items-center justify-content-end"
						style={{ padding: "10px 0", borderTop: "1px solid #F0F2F4" }}
					>
						<Button
							label="Cancel"
							onClick={() => setVisibleConfirm(false)}
							style={{
								border: "1px solid #CCCED5",
								color: "#21242B",
								backgroundColor: "white",
								borderRadius: "8px",
								marginRight: "16px",
							}}
						/>
						<Button
							label="Yes"
							className="btn btn-primary"
							style={{
								backgroundColor: "#1160B7",
								borderRadius: "8px",
							}}
							onClick={() => {
								setVisibleConfirm(false);
								handledeleteWindow(windowState.item ? windowState.item._id : "");
							}}
							autoFocus
						/>
					</div>
				}
			>
				<p
					style={{
						padding: "10px 0",
						fontWeight: "400",
						fontSize: "20px",
						lineHeight: "32px",
					}}
				>
					This action cannot be reverted. Are you sure to delete this employee's information?
				</p>
			</Dialog>
		</>
	);
};

export default SidebarWindow;
